This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-24T18:19:30.618Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitattributes
Boligventilasjon_Prosjekter/main_contractors.txt
config.ini
database.py
gui/__init__.py
gui/add_project_dialog.py
gui/base_projects_tab.py
gui/completed_projects_tab.py
gui/detailed_view_tab.py
gui/finished_projects_tab.py
gui/overview_tab.py
logger.py
main.py
pdf_converter.py
project.py
requirements.txt
utils.py

================================================================
Repository Files
================================================================

================
File: .gitattributes
================
# Auto detect text files and perform LF normalization
* text=auto

================
File: Boligventilasjon_Prosjekter/main_contractors.txt
================
Lindal
Lohne

================
File: config.ini
================
# config.ini
[Paths]
template_dir = ./templates
project_dir = ./Boligventilasjon_Prosjekter
docx_temp_dir = ./temp_docx
logs_dir = ./logs
database_file = projects.db

================
File: database.py
================
# database.py
from sqlalchemy import create_engine, Column, Integer, String, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from project import Project
from logger import get_logger
import os
from configparser import ConfigParser

logger = get_logger(__name__)

# Load configuration
config = ConfigParser()
config.read('config.ini')

# Retrieve paths from config
project_dir = os.path.abspath(config['Paths'].get('project_dir', 'Boligventilasjon_Prosjekter'))
database_file = config['Paths'].get('database_file', 'projects.db')

# Ensure project_dir exists
if not os.path.exists(project_dir):
    try:
        os.makedirs(project_dir)
        logger.info(f"Created project directory at {project_dir}")
    except Exception as e:
        logger.error(f"Failed to create project directory at {project_dir}: {e}")
        raise

# Construct full database path
db_path = os.path.join(project_dir, database_file)

Base = declarative_base()

class ProjectModel(Base):
    __tablename__ = 'projects'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False)
    number = Column(String, nullable=False)
    start_date = Column(String, nullable=False)
    end_date = Column(String, nullable=True)
    status = Column(String, nullable=False)
    is_residential_complex = Column(Boolean, default=False)
    number_of_units = Column(Integer, default=0)
    residential_details = Column(String, default="")
    worker = Column(String, nullable=False)
    extra = Column(String, default="")
    main_contractor = Column(String, nullable=True)  # New Field

class Database:
    def __init__(self):
        try:
            self.engine = create_engine(f'sqlite:///{db_path}', echo=False)
            Base.metadata.create_all(self.engine)
            Session = sessionmaker(bind=self.engine)
            self.session = Session()
            logger.info(f"Database initialized at {db_path}")
        except Exception as e:
            logger.error(f"Failed to initialize database at {db_path}: {e}")
            raise

    def add_project(self, project: Project):
        try:
            project_model = ProjectModel(
                name=project.name,
                number=project.number,
                start_date=project.start_date,
                end_date=project.end_date,
                status=project.status,
                is_residential_complex=project.is_residential_complex,
                number_of_units=project.number_of_units,
                residential_details=project.residential_details,
                worker=project.worker,
                extra=project.extra,
                main_contractor=project.main_contractor  # Map New Attribute
            )
            self.session.add(project_model)
            self.session.commit()
            logger.info(f"Added project: {project.name} ({project.number})")
            return project_model.id
        except Exception as e:
            logger.error(f"Failed to add project: {e}")
            self.session.rollback()
            raise

    def update_project(self, project: Project):
        try:
            project_model = self.session.query(ProjectModel).filter_by(id=project.id).first()
            if project_model:
                project_model.name = project.name
                project_model.number = project.number
                project_model.start_date = project.start_date
                project_model.end_date = project.end_date
                project_model.status = project.status
                project_model.is_residential_complex = project.is_residential_complex
                project_model.number_of_units = project.number_of_units
                project_model.residential_details = project.residential_details
                project_model.worker = project.worker
                project_model.extra = project.extra
                project_model.main_contractor = project.main_contractor  # Update New Attribute
                self.session.commit()
                logger.info(f"Updated project ID {project.id}: {project.name} ({project.number})")
        except Exception as e:
            logger.error(f"Failed to update project ID {project.id}: {e}")
            self.session.rollback()
            raise

    def delete_project(self, project_id: int):
        try:
            project_model = self.session.query(ProjectModel).filter_by(id=project_id).first()
            if project_model:
                self.session.delete(project_model)
                self.session.commit()
                logger.info(f"Deleted project ID {project_id}")
        except Exception as e:
            logger.error(f"Failed to delete project ID {project_id}: {e}")
            self.session.rollback()
            raise

    def load_projects(self, status=None):
        try:
            query = self.session.query(ProjectModel)
            if status:
                query = query.filter_by(status=status)
            projects = query.all()
            if status:
                logger.info(f"Loaded projects with status='{status}'")
            else:
                logger.info("Loaded all projects")
            return [Project(
                id=p.id,
                name=p.name,
                number=p.number,
                start_date=p.start_date,
                end_date=p.end_date,
                status=p.status,
                is_residential_complex=p.is_residential_complex,
                number_of_units=p.number_of_units,
                residential_details=p.residential_details,
                worker=p.worker,
                extra=p.extra,
                main_contractor=p.main_contractor  # Map New Attribute
            ) for p in projects]
        except Exception as e:
            logger.error(f"Failed to load projects: {e}")
            raise

    def get_project_by_id(self, project_id: int):
        try:
            p = self.session.query(ProjectModel).filter_by(id=project_id).first()
            if p:
                logger.info(f"Retrieved project ID {project_id}")
                return Project(
                    id=p.id,
                    name=p.name,
                    number=p.number,
                    start_date=p.start_date,
                    end_date=p.end_date,
                    status=p.status,
                    is_residential_complex=p.is_residential_complex,
                    number_of_units=p.number_of_units,
                    residential_details=p.residential_details,
                    worker=p.worker,
                    extra=p.extra,
                    main_contractor=p.main_contractor  # Map New Attribute
                )
            logger.warning(f"Project ID {project_id} not found.")
            return None
        except Exception as e:
            logger.error(f"Failed to retrieve project ID {project_id}: {e}")
            raise

    def close(self):
        self.session.close()
        logger.info("Database session closed.")

================
File: gui/__init__.py
================
# gui/__init__.py
# This file can be left empty or used for package initialization if needed.

================
File: gui/add_project_dialog.py
================
# gui/add_project_dialog.py
from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QFormLayout, QLineEdit, QDateEdit,
    QComboBox, QCheckBox, QSpinBox, QPushButton, QMessageBox, QHBoxLayout, QTextEdit
)
from PyQt5.QtCore import Qt, QDate, QThread
from gui.base_projects_tab import BaseProjectsTab
from project import Project
from utils import (
    sanitize_filename,
    get_template_dir,
    check_template_files,
    open_docx_file,
    get_project_dir,
    load_main_contractors,
    add_main_contractor,
    get_docx_temp_dir
)
from logger import get_logger
from pdf_converter import PDFConverter
import os
import shutil
from datetime import datetime

logger = get_logger(__name__)

class AddProjectDialog(QDialog):
    def __init__(self, db):
        super().__init__()
        self.db = db
        self.setWindowTitle("Add New Project")
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)

        self.form_layout = QFormLayout()

        # Project Name
        self.name_input = QLineEdit()
        self.form_layout.addRow("Project Name:", self.name_input)

        # Project Number
        self.number_input = QLineEdit()
        self.form_layout.addRow("Project Number:", self.number_input)

        # Worker Selection
        self.worker_input = QComboBox()
        self.worker_input.addItems(["Alex", "William"])
        self.worker_input.setCurrentText("Alex")  # Default to "Alex"
        self.form_layout.addRow("Worker:", self.worker_input)

        # Start Date
        self.start_date_input = QDateEdit(calendarPopup=True)
        self.start_date_input.setDate(QDate.currentDate())
        self.start_date_input.setDisplayFormat("dd-MM-yyyy")
        self.form_layout.addRow("Start Date:", self.start_date_input)

        # End Date
        self.end_date_input = QDateEdit(calendarPopup=True)
        self.end_date_input.setSpecialValueText("")
        self.end_date_input.setDateRange(QDate.currentDate(), QDate(9999, 12, 31))
        self.end_date_input.setDate(QDate())  # Blank by default
        self.end_date_input.setDisplayFormat("dd-MM-yyyy")
        self.end_date_input.setEnabled(False)  # Not required to be filled in
        self.form_layout.addRow("End Date:", self.end_date_input)

        # Status Selection
        self.status_input = QComboBox()
        self.status_input.addItems(["Active", "Awaiting Completion", "Paused", "Completed", "Finished"])
        self.form_layout.addRow("Status:", self.status_input)

        # Residential Complex Checkbox
        self.residential_checkbox = QCheckBox("Residential Complex")
        self.residential_checkbox.stateChanged.connect(self.toggle_units)
        self.form_layout.addRow(self.residential_checkbox)

        # Number of Units
        self.units_input = QSpinBox()
        self.units_input.setRange(1, 1000)
        self.units_input.setEnabled(False)
        self.form_layout.addRow("Number of Units:", self.units_input)

        # Residential Details (New Field)
        self.residential_details_input = QTextEdit()
        self.residential_details_input.setPlaceholderText("Enter residential details here...")
        self.residential_details_input.setEnabled(False)  # Enabled only if Residential Complex is checked
        self.form_layout.addRow("Residential Details:", self.residential_details_input)

        # Extra Field
        self.extra_input = QLineEdit()
        self.form_layout.addRow("Extra:", self.extra_input)

        # Main Contractor Checkbox
        self.main_contractor_checkbox = QCheckBox("Add Main Contractor")
        self.main_contractor_checkbox.stateChanged.connect(self.toggle_main_contractor)
        self.form_layout.addRow(self.main_contractor_checkbox)

        # Main Contractor ComboBox
        self.main_contractor_input = QComboBox()
        self.main_contractor_input.setEditable(True)
        self.main_contractor_input.addItems(load_main_contractors())
        self.main_contractor_input.setEnabled(False)
        self.main_contractor_input.lineEdit().setPlaceholderText("Select or enter Main Contractor")
        self.form_layout.addRow("Main Contractor:", self.main_contractor_input)

        self.layout.addLayout(self.form_layout)

        # Buttons Layout
        self.button_layout = QHBoxLayout()
        self.save_btn = QPushButton("Save")
        self.save_btn.clicked.connect(self.save_project)
        self.cancel_btn = QPushButton("Cancel")
        self.cancel_btn.clicked.connect(self.reject)
        self.button_layout.addWidget(self.save_btn)
        self.button_layout.addWidget(self.cancel_btn)
        self.layout.addLayout(self.button_layout)

    def toggle_units(self, state):
        is_checked = state == Qt.Checked
        self.units_input.setEnabled(is_checked)
        self.residential_details_input.setEnabled(is_checked)  # Enable/disable residential details input

    def toggle_main_contractor(self, state):
        is_checked = state == Qt.Checked
        self.main_contractor_input.setEnabled(is_checked)

    def save_project(self):
        # Gather data from input fields
        name = self.name_input.text().strip()
        number = self.number_input.text().strip()
        worker = self.worker_input.currentText().strip()
        start_date = self.start_date_input.date().toPyDate()
        end_date = self.end_date_input.date().toPyDate() if self.end_date_input.date().isValid() else None
        status = self.status_input.currentText()
        is_residential = self.residential_checkbox.isChecked()
        units = self.units_input.value() if is_residential else 0
        residential_details = self.residential_details_input.toPlainText().strip() if is_residential else ""
        extra = self.extra_input.text().strip()

        # Main Contractor
        main_contractor = self.main_contractor_input.currentText().strip() if self.main_contractor_checkbox.isChecked() else None

        # Validation
        if not name and not number:
            QMessageBox.warning(self, "Validation Error", "At least one of Project Name or Project Number must be provided.")
            return

        if end_date and end_date < start_date:
            QMessageBox.warning(self, "Validation Error", "End Date cannot be earlier than Start Date.")
            return

        if is_residential and not residential_details:
            QMessageBox.warning(self, "Validation Error", "Residential details must be provided for a residential complex.")
            return

        if main_contractor:
            if main_contractor not in load_main_contractors():
                # Ask user to confirm adding a new contractor
                reply = QMessageBox.question(
                    self,
                    "Add New Contractor",
                    f"'{main_contractor}' is not in the existing list. Do you want to add it?",
                    QMessageBox.Yes | QMessageBox.No
                )
                if reply == QMessageBox.Yes:
                    try:
                        add_main_contractor(main_contractor)
                        QMessageBox.information(self, "Success", f"'{main_contractor}' has been added to the Main Contractors list.")
                        # Update the ComboBox with the new contractor
                        self.main_contractor_input.addItem(main_contractor)
                        logger.info(f"Added new main contractor: {main_contractor}")
                    except Exception as e:
                        QMessageBox.critical(self, "Error", f"Failed to add new contractor: {str(e)}")
                        logger.error(f"Failed to add main contractor '{main_contractor}': {e}")
                        return

        # Create Project instance without 'id'
        project = Project(
            name=name,
            number=number,
            start_date=start_date.strftime("%Y-%m-%d"),
            end_date=end_date.strftime("%Y-%m-%d") if end_date else None,
            status=status,
            is_residential_complex=is_residential,
            number_of_units=units,
            worker=worker,
            residential_details=residential_details,
            extra=extra,
            main_contractor=main_contractor  # Set New Attribute
        )

        # Add project to database
        try:
            project_id = self.db.add_project(project)
        except Exception as e:
            QMessageBox.critical(self, "Database Error", f"Failed to add project: {str(e)}")
            return

        # Create Project Folder
        folder_name = ""
        if main_contractor:
            folder_name = sanitize_filename(f"{main_contractor} - {name} - {number}") if (name or number) else f"{main_contractor} - Project_{project_id}"
        else:
            folder_name = sanitize_filename(f"{name}_{number}") if (name or number) else f"Project_{project_id}"
        project_folder = os.path.join(get_project_dir(), folder_name)
        try:
            os.makedirs(project_folder, exist_ok=True)
            logger.info(f"Created project folder at {project_folder}")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to create project folder:\n{str(e)}")
            logger.error(f"Failed to create project folder at {project_folder}: {e}")
            return

        # Check for Template directory and required files
        valid, message = check_template_files()
        if not valid:
            QMessageBox.critical(self, "Template Error", message)
            logger.error(f"Template check failed: {message}")
            return

        # Define Template directory path
        template_dir = get_template_dir()

        # Copy the required template files into the project folder
        try:
            required_files = ["Innregulering.docx", "Sjekkliste.docx"]
            for file in required_files:
                shutil.copy(os.path.join(template_dir, file), project_folder)
            logger.info(f"Copied templates to {project_folder}")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to copy template files:\n{str(e)}")
            logger.error(f"Failed to copy templates to {project_folder}: {e}")
            return

        # Optional: Initiate PDF conversion if needed
        # self.convert_pdf(project)

        QMessageBox.information(self, "Success", "Project added successfully.")
        logger.info(f"Project added successfully: {project.name} ({project.number})")
        self.accept()

    def convert_pdf(self, project):
        # Example method to convert a related Excel file to PDF
        excel_path = os.path.join(get_project_dir(), sanitize_filename(f"{project.name}_{project.number}"), "Data.xlsx")
        pdf_path = os.path.join(get_docx_temp_dir(), f"{project.name}_{project.number}_Data.pdf")

        self.converter = PDFConverter(excel_path, pdf_path)
        self.thread = QThread()
        self.converter.moveToThread(self.thread)
        self.converter.conversion_complete.connect(self.on_conversion_complete)
        self.converter.conversion_failed.connect(self.on_conversion_failed)
        self.thread.started.connect(self.converter.run_conversion)
        self.converter.conversion_complete.connect(self.thread.quit)
        self.converter.conversion_failed.connect(self.thread.quit)
        self.thread.start()

    def on_conversion_complete(self, pdf_path):
        QMessageBox.information(self, "Conversion Complete", f"PDF saved at {pdf_path}")
        logger.info(f"PDF conversion completed: {pdf_path}")

    def on_conversion_failed(self, error_message):
        QMessageBox.critical(self, "Conversion Failed", f"Failed to convert PDF:\n{error_message}")
        logger.error(f"PDF conversion failed: {error_message}")

================
File: gui/base_projects_tab.py
================
# gui/base_projects_tab.py
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QPushButton, QTableWidget, QTableWidgetItem, QHBoxLayout, QMessageBox
)
from PyQt5.QtGui import QColor
from datetime import datetime
import os
import sys
import subprocess
import tempfile
from logger import get_logger
from utils import sanitize_filename, open_docx_file, get_project_dir
from docx import Document

logger = get_logger(__name__)

class BaseProjectsTab(QWidget):
    def __init__(self, db, status_filter=None, title=""):
        super().__init__()
        self.db = db
        self.status_filter = status_filter
        self.title = title
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)
        self.setup_ui()
        self.load_projects()
    
    def setup_ui(self):
        # Buttons Layout
        self.buttons_layout = QHBoxLayout()
        
        # Save to DOCX Button
        self.save_docx_btn = QPushButton("Save to DOCX")
        self.save_docx_btn.setToolTip(f"Save {self.title} to DOCX")
        self.save_docx_btn.clicked.connect(self.save_docx)
        self.buttons_layout.addWidget(self.save_docx_btn)

        # Open DOCX Button
        self.open_docx_btn = QPushButton("Open DOCX")
        self.open_docx_btn.setToolTip(f"Open {self.title} DOCX")
        self.open_docx_btn.clicked.connect(self.open_docx)
        self.buttons_layout.addWidget(self.open_docx_btn)

        self.layout.addLayout(self.buttons_layout)

        # Projects Table
        self.table = QTableWidget()
        self.table.setColumnCount(12)  # Increased from 11 to 12 for "Main Contractor"
        self.table.setHorizontalHeaderLabels([
            "Project Name",
            "Project Number",
            "Main Contractor",  # New Column
            "Complex",
            "Start Date",
            "End Date",
            "Status",
            "Worker",
            "Innregulering",
            "Sjekkliste",
            "Extra",
            "Move"
        ])
        self.table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.layout.addWidget(self.table)

        # Temporary DOCX path
        self.docx_path = os.path.join(tempfile.gettempdir(), f"{self.title.replace(' ', '_')}_Projects.docx")

    def load_projects(self):
        self.table.setRowCount(0)
        projects = self.db.load_projects(status=self.status_filter)
        for project in projects:
            self.add_project_row(project)

    def add_project_row(self, project):
        row_position = self.table.rowCount()
        self.table.insertRow(row_position)

        self.table.setItem(row_position, 0, QTableWidgetItem(project.name))
        self.table.setItem(row_position, 1, QTableWidgetItem(project.number))
        self.table.setItem(row_position, 2, QTableWidgetItem(project.main_contractor if project.main_contractor else ""))
        complex_text = "Yes" if project.is_residential_complex else "No"
        self.table.setItem(row_position, 3, QTableWidgetItem(complex_text))
        self.table.setItem(row_position, 4, QTableWidgetItem(self.format_date(project.start_date)))
        self.table.setItem(row_position, 5, QTableWidgetItem(self.format_date(project.end_date) if project.end_date else ""))
        self.table.setItem(row_position, 6, QTableWidgetItem(project.status))
        self.table.setItem(row_position, 7, QTableWidgetItem(project.worker))
        self.table.setItem(row_position, 10, QTableWidgetItem(project.extra if project.extra else ""))  # "Extra" field

        # Apply background color based on status
        if project.status in ["Awaiting Completion", "Paused"]:
            for col in range(12):  # Apply to entire row
                item = self.table.item(row_position, col)
                if item:
                    item.setBackground(QColor('yellow'))

        # Innregulering Button
        innregulering_btn = QPushButton("View DOCX")
        innregulering_btn.setToolTip("View Innregulering DOCX")
        innregulering_btn.clicked.connect(lambda checked, p=project: self.view_docx(p, "Innregulering"))
        self.table.setCellWidget(row_position, 8, innregulering_btn)

        # Sjekkliste Button
        sjekkliste_btn = QPushButton("View DOCX")
        sjekkliste_btn.setToolTip("View Sjekkliste DOCX")
        sjekkliste_btn.clicked.connect(lambda checked, p=project: self.view_docx(p, "Sjekkliste"))
        self.table.setCellWidget(row_position, 9, sjekkliste_btn)

        # Extra Button
        extra_btn = QPushButton("View")
        extra_btn.setToolTip("View Extra Details")
        if not project.extra:
            extra_btn.setEnabled(False)  # Gray out if "Extra" is empty
        else:
            extra_btn.clicked.connect(lambda checked, p=project: self.view_extra(p))
        self.table.setCellWidget(row_position, 10, extra_btn)

        # Move to Active Button
        move_active_btn = QPushButton("Active")
        move_active_btn.setToolTip("Move Project to Active")
        move_active_btn.setStyleSheet("background-color: yellow")
        move_active_btn.clicked.connect(lambda checked, p=project: self.move_to_active(p))
        self.table.setCellWidget(row_position, 11, move_active_btn)

    def format_date(self, date_str):
        try:
            return datetime.strptime(date_str, "%Y-%m-%d").strftime("%d-%m-%Y")
        except:
            return date_str

    def view_docx(self, project, doc_type):
        folder_name = sanitize_filename(f"{project.main_contractor} - {project.name} - {project.number}") if project.main_contractor else sanitize_filename(f"{project.name}_{project.number}")
        project_folder = os.path.join(get_project_dir(), folder_name)
        docx_file = os.path.join(project_folder, f"{doc_type}.docx")

        if not os.path.exists(docx_file):
            QMessageBox.warning(self, "DOCX Error", f"{doc_type}.docx does not exist for this project.")
            logger.warning(f"{doc_type}.docx not found for project ID {project.id}")
            return

        success, message = open_docx_file(docx_file)
        if not success:
            QMessageBox.warning(self, "DOCX Error", message)
            logger.error(f"Failed to open {doc_type}.docx for project ID {project.id}: {message}")

    def view_extra(self, project):
        QMessageBox.information(self, "Extra Details", f"Extra Details:\n{project.extra}")

    def move_to_active(self, project):
        reply = QMessageBox.question(
            self,
            "Confirm Status Change",
            f"Are you sure you want to move project '{project.name}' to Active?",
            QMessageBox.Yes | QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            try:
                project.status = "Active"
                project.end_date = None  # Clear end date when moving back to Active
                self.db.update_project(project)
                self.load_projects()
                QMessageBox.information(self, "Status Updated", f"Project '{project.name}' moved to Active.")
                logger.info(f"Moved project ID {project.id} to Active.")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to move to Active: {str(e)}")
                logger.error(f"Failed to move project ID {project.id} to Active: {e}")

    def save_docx(self):
        try:
            document = Document()
            document.add_heading(f'{self.title}', 0)

            projects = self.db.load_projects(status=self.status_filter)
            if not projects:
                QMessageBox.information(self, "No Data", f"There are no {self.title.lower()} to export.")
                return

            headers = ["Project Name", "Project Number", "Main Contractor", "Complex", "Start Date", "End Date", "Status", "Worker", "Extra"]
            table = document.add_table(rows=1, cols=len(headers))
            table.style = 'Light List Accent 1'

            hdr_cells = table.rows[0].cells
            for idx, header in enumerate(headers):
                hdr_cells[idx].text = header

            for project in projects:
                row_cells = table.add_row().cells
                row_cells[0].text = project.name
                row_cells[1].text = project.number
                row_cells[2].text = project.main_contractor if project.main_contractor else ""
                row_cells[3].text = "Yes" if project.is_residential_complex else "No"
                row_cells[4].text = self.format_date(project.start_date)
                row_cells[5].text = self.format_date(project.end_date) if project.end_date else ""
                row_cells[6].text = project.status
                row_cells[7].text = project.worker
                row_cells[8].text = project.extra if project.extra else ""

            document.add_paragraph(f"Generated on: {datetime.now().strftime('%d-%m-%Y')}", style='Intense Quote')
            document.save(self.docx_path)

            QMessageBox.information(self, "Success", f"DOCX saved successfully at {self.docx_path}")
            logger.info(f"DOCX saved at {self.docx_path}")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to save DOCX: {str(e)}")
            logger.error(f"Failed to save DOCX: {e}")

    def open_docx(self):
        if not os.path.exists(self.docx_path):
            QMessageBox.warning(self, "DOCX Not Found", "No DOCX has been saved yet.")
            logger.warning("Attempted to open DOCX but none exists.")
            return

        try:
            if sys.platform.startswith('darwin'):
                subprocess.call(['open', self.docx_path])
            elif os.name == 'nt':
                os.startfile(self.docx_path)
            elif os.name == 'posix':
                subprocess.call(['xdg-open', self.docx_path])
            QMessageBox.information(self, "Open DOCX", "The DOCX has been opened.")
            logger.info(f"Opened DOCX at {self.docx_path}")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to open DOCX: {str(e)}")
            logger.error(f"Failed to open DOCX: {e}")

================
File: gui/completed_projects_tab.py
================
# gui/completed_projects_tab.py
from gui.base_projects_tab import BaseProjectsTab
from logger import get_logger

logger = get_logger(__name__)

class CompletedProjectsTab(BaseProjectsTab):
    def __init__(self, db):
        super().__init__(db, status_filter="Completed", title="Completed Projects")

================
File: gui/detailed_view_tab.py
================
# gui/detailed_view_tab.py
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QPushButton
)
from PyQt5.QtCore import Qt
from gui.base_projects_tab import BaseProjectsTab
from gui.add_project_dialog import AddProjectDialog
from logger import get_logger

logger = get_logger(__name__)

class DetailedViewTab(BaseProjectsTab):
    def __init__(self, db):
        super().__init__(db, status_filter=None, title="Detailed Project View")
        self.current_project = None
        self.setup_add_project_ui()

    def setup_add_project_ui(self):
        # Add Project Button
        self.add_project_btn = QPushButton("Add New Project")
        self.add_project_btn.clicked.connect(self.open_add_project_dialog)
        self.layout.addWidget(self.add_project_btn)

    def open_add_project_dialog(self):
        dialog = AddProjectDialog(self.db)
        if dialog.exec_():
            self.load_projects()
            logger.info("New project added via dialog.")

================
File: gui/finished_projects_tab.py
================
# gui/finished_projects_tab.py
from gui.base_projects_tab import BaseProjectsTab
from logger import get_logger

logger = get_logger(__name__)

class FinishedProjectsTab(BaseProjectsTab):
    def __init__(self, db):
        super().__init__(db, status_filter="Finished", title="Finished Projects")

================
File: gui/overview_tab.py
================
# gui/overview_tab.py
from gui.base_projects_tab import BaseProjectsTab
from logger import get_logger

logger = get_logger(__name__)

class OverviewTab(BaseProjectsTab):
    def __init__(self, db):
        super().__init__(db, status_filter=None, title="Overview Projects")

================
File: logger.py
================
# logger.py
import logging
import os
from configparser import ConfigParser

# Load configuration
config = ConfigParser()
config.read('config.ini')

# Create logs directory if it doesn't exist
logs_dir = os.path.abspath(config['Paths']['logs_dir'])
if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)

logging.basicConfig(
    filename=os.path.join(logs_dir, 'app.log'),
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filemode='a'
)

def get_logger(name):
    return logging.getLogger(name)

================
File: main.py
================
# main.py
import sys
import os
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QTabWidget, QMessageBox, QFileDialog, QShortcut
)
from PyQt5.QtGui import QKeySequence
from PyQt5.QtCore import Qt
from database import Database
from gui.overview_tab import OverviewTab
from gui.completed_projects_tab import CompletedProjectsTab
from gui.finished_projects_tab import FinishedProjectsTab
from gui.detailed_view_tab import DetailedViewTab
from logger import get_logger

logger = get_logger(__name__)

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Boligventilasjon Project Management")
        self.resize(1200, 800)

        self.db = Database()

        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)

        # Initialize tabs
        self.overview_tab = OverviewTab(self.db)
        self.completed_projects_tab = CompletedProjectsTab(self.db)
        self.finished_projects_tab = FinishedProjectsTab(self.db)
        self.detailed_view_tab = DetailedViewTab(self.db)

        self.tabs.addTab(self.overview_tab, "Project Overview")
        self.tabs.addTab(self.completed_projects_tab, "Completed Projects")
        self.tabs.addTab(self.finished_projects_tab, "Finished Projects")
        self.tabs.addTab(self.detailed_view_tab, "Detailed Project View")

        self.setup_menu_bar()
        self.setup_shortcuts()
        self.apply_stylesheet()

    def setup_menu_bar(self):
        menu_bar = self.menuBar()

        # File Menu
        file_menu = menu_bar.addMenu("File")

        # Setup Template Action
        setup_template_action = file_menu.addAction("Setup Template")
        setup_template_action.triggered.connect(self.setup_template)

    def setup_template(self):
        """
        Handles the Setup Template functionality:
        - Creates the 'Template' folder if it doesn't exist.
        - Prompts the user to select 'Innregulering.docx' and 'Sjekkliste.docx' files.
        - Copies the selected files into the 'Template' folder.
        """
        from utils import get_template_dir
        from shutil import copy
        from logger import get_logger

        logger = get_logger(__name__)

        template_dir = get_template_dir()

        # Create 'Template' folder if it doesn't exist
        if not os.path.exists(template_dir):
            try:
                os.makedirs(template_dir)
                QMessageBox.information(self, "Template Folder Created", f"'Template' folder created at:\n{template_dir}")
                logger.info(f"Created template directory at {template_dir}")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to create 'Template' folder:\n{str(e)}")
                logger.error(f"Failed to create template directory: {e}")
                return
        else:
            QMessageBox.information(self, "Template Folder Exists", f"'Template' folder already exists at:\n{template_dir}")
            logger.info(f"Template directory already exists at {template_dir}")

        # Prompt user to select 'Innregulering.docx'
        innregulering_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select 'Innregulering.docx' Template File",
            "",
            "Word Documents (*.docx)"
        )

        if not innregulering_path:
            QMessageBox.warning(self, "Operation Cancelled", "No 'Innregulering.docx' file selected.")
            logger.warning("User cancelled selecting 'Innregulering.docx'")
            return

        # Validate selected file name
        if os.path.basename(innregulering_path).lower() != "innregulering.docx":
            QMessageBox.warning(self, "Invalid File", "Please select a file named 'Innregulering.docx'.")
            logger.warning("User selected an invalid 'Innregulering.docx' file.")
            return

        # Prompt user to select 'Sjekkliste.docx'
        sjekkliste_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select 'Sjekkliste.docx' Template File",
            "",
            "Word Documents (*.docx)"
        )

        if not sjekkliste_path:
            QMessageBox.warning(self, "Operation Cancelled", "No 'Sjekkliste.docx' file selected.")
            logger.warning("User cancelled selecting 'Sjekkliste.docx'")
            return

        # Validate selected file name
        if os.path.basename(sjekkliste_path).lower() != "sjekkliste.docx":
            QMessageBox.warning(self, "Invalid File", "Please select a file named 'Sjekkliste.docx'.")
            logger.warning("User selected an invalid 'Sjekkliste.docx' file.")
            return

        # Copy the selected files into the 'Template' folder
        try:
            copy(innregulering_path, os.path.join(template_dir, "Innregulering.docx"))
            copy(sjekkliste_path, os.path.join(template_dir, "Sjekkliste.docx"))
            QMessageBox.information(self, "Success", f"Templates have been set up successfully in:\n{template_dir}")
            logger.info("Templates copied successfully.")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to copy template files:\n{str(e)}")
            logger.error(f"Failed to copy templates: {e}")

    def setup_shortcuts(self):
        # Shortcuts to switch tabs
        QShortcut(QKeySequence("Alt+1"), self).activated.connect(lambda: self.tabs.setCurrentIndex(0))
        QShortcut(QKeySequence("Alt+2"), self).activated.connect(lambda: self.tabs.setCurrentIndex(1))
        QShortcut(QKeySequence("Alt+3"), self).activated.connect(lambda: self.tabs.setCurrentIndex(2))
        QShortcut(QKeySequence("Alt+4"), self).activated.connect(lambda: self.tabs.setCurrentIndex(3))

    def apply_stylesheet(self):
        """
        Applies a custom stylesheet to highlight the selected tab with a light blueish color.
        """
        stylesheet = """
        QTabWidget::pane { /* The tab widget frame */
            border-top: 2px solid #C2C7CB;
        }

        /* Style the tab using the tab selector */
        QTabBar::tab {
            background: lightgray;
            border: 1px solid #C4C4C3;
            padding: 10px;
            margin-right: 2px;
        }

        /* Style the selected tab */
        QTabBar::tab:selected {
            background: #ADD8E6; /* Light Blue */
            font-weight: bold;
        }

        /* Optional: Hover effect */
        QTabBar::tab:hover {
            background: #D3D3D3; /* Light Grey */
        }
        """
        self.tabs.setStyleSheet(stylesheet)

    def closeEvent(self, event):
        self.db.close()
        event.accept()

def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()

================
File: pdf_converter.py
================
# pdf_converter.py
import subprocess
import os
from PyQt5.QtCore import QObject, pyqtSignal
import sys
from logger import get_logger

logger = get_logger(__name__)

class PDFConverter(QObject):
    conversion_complete = pyqtSignal(str)
    conversion_failed = pyqtSignal(str)

    def __init__(self, excel_path, pdf_path):
        super().__init__()
        self.excel_path = excel_path
        self.pdf_path = pdf_path

    def run_conversion(self):
        try:
            if os.name == 'nt':
                import win32com.client
                excel = win32com.client.Dispatch("Excel.Application")
                excel.Visible = False
                wb = excel.Workbooks.Open(self.excel_path)
                wb.ExportAsFixedFormat(0, self.pdf_path)
                wb.Close(False)
                excel.Quit()
                logger.info(f"Converted Excel to PDF: {self.excel_path} -> {self.pdf_path}")
                self.conversion_complete.emit(self.pdf_path)
            elif sys.platform.startswith('darwin') or os.name == 'posix':
                # Use LibreOffice for macOS and Linux
                subprocess.run(['libreoffice', '--headless', '--convert-to', 'pdf', self.excel_path, '--outdir', os.path.dirname(self.pdf_path)], check=True)
                logger.info(f"Converted Excel to PDF using LibreOffice: {self.excel_path} -> {self.pdf_path}")
                self.conversion_complete.emit(self.pdf_path)
            else:
                raise OSError("Unsupported operating system for PDF conversion.")
        except Exception as e:
            logger.error(f"PDF conversion failed: {e}")
            self.conversion_failed.emit(str(e))

================
File: project.py
================
# project.py
from dataclasses import dataclass, field
from typing import Optional

@dataclass
class Project:
    id: Optional[int] = field(default=None)
    name: str = ""
    number: str = ""
    start_date: str = ""
    end_date: Optional[str] = None
    status: str = ""
    is_residential_complex: bool = False
    number_of_units: int = 0
    worker: str = ""
    residential_details: str = ""
    extra: str = ""
    main_contractor: Optional[str] = None  # New Optional Attribute

================
File: requirements.txt
================
# requirements.txt
PyQt5==5.15.4
SQLAlchemy==1.4.46
pywin32==303; platform_system == "Windows"
openpyxl==3.0.10
python-docx==0.8.11

================
File: utils.py
================
# utils.py
import os
import sys
import subprocess
from configparser import ConfigParser

# Load configuration
config = ConfigParser()
config.read('config.ini')

def sanitize_filename(filename):
    return "".join(c for c in filename if c.isalnum() or c in (" ", "_", "-")).rstrip()

def get_template_dir():
    return os.path.abspath(config['Paths']['template_dir'])

def get_project_dir():
    return os.path.abspath(config['Paths']['project_dir'])

def get_docx_temp_dir():
    return os.path.abspath(config['Paths']['docx_temp_dir'])

def get_logs_dir():
    return os.path.abspath(config['Paths']['logs_dir'])

def get_main_contractors_file():
    project_dir = get_project_dir()
    return os.path.join(project_dir, "main_contractors.txt")

def check_template_files():
    template_dir = get_template_dir()
    required_files = ["Innregulering.docx", "Sjekkliste.docx"]
    missing_files = [file for file in required_files if not os.path.exists(os.path.join(template_dir, file))]
    if missing_files:
        return False, f"Missing template files: {', '.join(missing_files)}"
    return True, "All template files are present."

def open_docx_file(filepath):
    try:
        if sys.platform.startswith('darwin'):
            subprocess.call(['open', filepath])
        elif os.name == 'nt':
            os.startfile(filepath)
        elif os.name == 'posix':
            subprocess.call(['xdg-open', filepath])
        return True, "Opened successfully."
    except Exception as e:
        return False, f"Failed to open file: {str(e)}"

def load_main_contractors():
    """
    Loads the list of main contractors from a text file.
    """
    contractors_file = get_main_contractors_file()
    if not os.path.exists(contractors_file):
        # If the file doesn't exist, create it with default contractors
        with open(contractors_file, 'w') as f:
            f.write("Lindal\nLohne\n")
    with open(contractors_file, 'r') as f:
        contractors = [line.strip() for line in f if line.strip()]
    return contractors

def add_main_contractor(contractor_name):
    """
    Adds a new main contractor to the storage file.
    """
    contractors_file = get_main_contractors_file()
    contractors = load_main_contractors()
    if contractor_name not in contractors:
        with open(contractors_file, 'a') as f:
            f.write(f"{contractor_name}\n")
